import { useState, useEffect, useRef } from "react";
import { Chess } from "chess.js";
import type { Square } from "chess.js";
import { Chessboard } from "react-chessboard";

interface EmscriptenModule {
  cwrap: (
    ident: string,
    returnType: "string" | "number" | null,
    argTypes: Array<"string" | "number">
  ) => (...args: any[]) => any;
}

interface EngineAPI {
  createChessboard: () => void;
  parsePosition: (positionCmd: string) => void;
  parseGo: (depth: number) => string;
}

export default function App() {
  const [game, setGame] = useState(new Chess());
  const [gameOn, setGameOn] = useState(false);
  const [side, setSide] = useState<"white" | "black">("white");
  const [engineReady, setEngineReady] = useState(false);
  const engineApi = useRef<EngineAPI | null>(null);
  
  const initializeEngine = async () => {
    try {
      // @ts-ignore – generated by Emscripten
      const engineFactory = (await import("./engine.js")).default;
      const module: EmscriptenModule = await engineFactory();

      console.log("WASM Engine Loaded!");

      engineApi.current = {
        createChessboard: module.cwrap("create_chessboard", null, []),
        parsePosition: module.cwrap("wasm_parse_position", null, ["string"]),
        parseGo: module.cwrap("wasm_parse_go", "string", ["number"]),
      };

      engineApi.current.createChessboard();
      setEngineReady(true);
    } catch (error) {
      console.error("Error loading WASM module:", error);
    }
  };
  useEffect(() => {

    initializeEngine();
  }, []);

  const EnginePosSet = (fen: string) => {
    const command = `position fen ${fen}`;
    console.log(`Sending to engine: ${command}`);
    engineApi.current?.parsePosition(command);
  };

  const EngineMove = (currentGame: Chess) => {
    if (!engineReady) return;
    let bestMove = engineApi.current?.parseGo(5);
    if (!bestMove) return;

    if (bestMove.startsWith("bestmove")) {
      bestMove = bestMove.replace("bestmove ", "").trim();
    }

    console.log(`Engine plays: ${bestMove}`);
    makeMove(
      bestMove.slice(0, 2) as Square,
      bestMove.slice(2, 4) as Square,
      bestMove.length > 4 ? bestMove[4] : "",
      currentGame
    );
  };

  const startGame = () => {
    if (gameOn) {
      setGame(new Chess());
      setGameOn(false);
      initializeEngine();
    } else {
      setGameOn(true); 

      if (side === "black") {
        const newGame = new Chess(game.fen());
        const fen = newGame.fen();
        EnginePosSet(fen);
        setTimeout(() => {
          EngineMove(newGame);
        }, 100);
      }
    }
  };


  const checkPromotion = (from: Square, to: Square, piece: string): boolean => {
    const isWhitePawn = piece === "wP" && from[1] === "7" && to[1] === "8";
    const isBlackPawn = piece === "bP" && from[1] === "2" && to[1] === "1";
    return isWhitePawn || isBlackPawn;
  };

  const handlePromotion = (piece: string, from: Square, to: Square): boolean => {
    const promotion = piece[1].toLowerCase();
    return makeMove(from, to, promotion);
  };

  const makeMove = (from: Square, to: Square, promotion: string = "", gameInstance?: Chess): boolean => {

    const currentGame = gameInstance || game;
    const newGame = new Chess(currentGame.fen());
    const result = newGame.move({ from, to, promotion });

    if (result) {
      setGame(newGame);

      const userTurn = side.charAt(0);
      const currentTurn = newGame.turn();
      
      if (userTurn !== currentTurn) {
        const fen = newGame.fen();
        EnginePosSet(fen);
        setTimeout(() => {
          EngineMove(newGame);
        }, 100);
      }
      return true;
    }
    return false;
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-black">
      <div className="flex items-center gap-8">
        {/* Chess Board */}
        <div className="flex flex-col items-center">
          <h1 className="text-3xl font-bold mb-4 text-white">♟️ Chess Game</h1>
          <p className="mb-4 text-lg text-white">
            Turn: {game.turn() === "w" ? "White" : "Black"}
          </p>
          <div className="border-4 border-purple-600 rounded-xl p-2 bg-white shadow-lg">
            <Chessboard
              position={game.fen()}
              onPromotionCheck={checkPromotion}
              onPromotionPieceSelect={(piece, src, dest) =>
                handlePromotion(piece as string, src as Square, dest as Square)
              }
              onPieceDrop={(src, dest) => makeMove(src, dest, "")}
              boardWidth={400}
              boardOrientation={side}
            />
          </div>
        </div>

        {/* Side & Controls */}
        <div className="flex flex-col gap-6">
          <div className="bg-gray-800 p-4 rounded-lg">
            <h3 className="text-white text-lg font-semibold mb-3">Select Side</h3>
            <div className="flex flex-col gap-2">
              <button
                className={`px-4 py-2 rounded-lg transition-colors ${
                  side === "white"
                    ? "bg-white text-black"
                    : "bg-gray-600 text-white hover:bg-gray-500"
                }`}
                onClick={() => !gameOn && setSide("white")}
              >
                White
              </button>
              <button
                className={`px-4 py-2 rounded-lg transition-colors ${
                  side === "black"
                    ? "bg-gray-900 text-white border-2 border-white"
                    : "bg-gray-600 text-white hover:bg-gray-500"
                }`}
                onClick={() => !gameOn && setSide("black")}
              >
                Black
              </button>
            </div>
          </div>

          <div className="bg-gray-800 p-4 rounded-lg">
            <h3 className="text-white text-lg font-semibold mb-3">Game Control</h3>
            <button
              className="w-full px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
              onClick={startGame}
            >
              {gameOn ? "Quit" : "Start Game"}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}